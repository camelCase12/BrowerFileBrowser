@*Chase Brower, 2023*@

@using BrowerFileBrowser.Containers
@using BrowerFileBrowser.DAO
@using BrowerFileBrowser.Interfaces;
@using BrowerFileBrowser.Models
@using MudBlazor;
@using System.IO;
@using BrowerFileBrowser.Utils;

@implements IFileViewer

@inject IThumbnailService ThumbnailService
@inject TagMessageContainer TagMessageContainer
@inject PathStateContainer PathStateContainer

@namespace BrowerFileBrowser.Pages

<div style="width: 100%; height: 100%; overflow-x: hidden; overflow-y: auto; padding: 1rem;">
    <MudGrid>
        @foreach (var directory in Directories)
        {
            <MudItem xs="6" sm="4" md="3" lg="2">
                <div class="square-card">
                    <MudCard Class="@GetCardClass(directory)" @onclick="() => HandleDirectoryClick(directory)">
                        <MudCardContent Style="height: 100%;">
                            <MudStack Style="width: 100%; height: 100%;" Justify="Justify.FlexEnd" AlignItems="AlignItems.Center">
                                <MudIcon Icon="@Icons.Material.Filled.Folder" Style="font-size: 80%; flex-grow: 1; width: 100%;" />
                                <MudTooltip Text="@directory.Name">
                                    <MudText Class="non-hoverable-text" Style="overflow-x: hidden; text-wrap: nowrap;">@directory.Name</MudText>
                                </MudTooltip>
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                </div>
            </MudItem>
        }

        @foreach (var file in Files)
        {
            <MudItem xs="6" sm="4" md="3" lg="2">
                <div class="square-card">
                    <MudCard Class="@GetCardClass(file)" @onclick="() => HandleFileClick(file)">
                        <MudCardContent Style="height: 100%;">
                            <div style="position:absolute; top:1rem; left:1rem; padding:12px;">
                                <TagList File="@file" />
                            </div>
                            <div style="top: 1rem; right: 1rem; position: absolute;">
                                <AddTagMenu File="@file" />
                            </div>
                            <MudStack Style="width: 100%; height: 100%;" Justify="Justify.FlexEnd" AlignItems="AlignItems.Center">
                                @if (thumbnailCache.TryGetValue(file.FullName, out var thumbnailUrl))
                                {
                                    <MudContainer Style="overflow: hidden;">
                                        <MudImage ObjectFit="ObjectFit.Contain" Src="@thumbnailUrl" Style="width: 100%; height:100%;" />
                                    </MudContainer>
                                }
                                <MudTooltip Text="@file.Name">
                                    <ChildContent>
                                        <MudText Class="non-hoverable-text" Style="overflow-x: hidden; text-wrap: nowrap;">@file.Name</MudText>
                                    </ChildContent>
                                </MudTooltip>
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                </div>
            </MudItem>
        }
    </MudGrid>
</div>

@code {
    private List<string> Tags = new List<string> { "Tag1", "Tag2", "Tag3" }; // Replace with your tags

    DoubleClickDetector doubleClickDetector = new();

    [Parameter]
    public List<DirectoryInfo> Directories { get; set; } = new();

    [Parameter]
    public List<FileInfo> Files { get; set; } = new();

    private List<FileSystemInfo> selections = new();

    private Dictionary<string, string> thumbnailCache = new Dictionary<string, string>();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        foreach (var file in Files)
        {
            if (!thumbnailCache.ContainsKey(file.FullName))
            {
                await GenerateThumbnail(file);
                await Task.Delay(50); // Delay to prevent UI freeze, adjust as needed
            }
        }
    }

    private async Task GenerateThumbnail(FileInfo file)
    {
        var thumbnailUrl = await ImageUtils.GetThumbnailAsDataURL(ThumbnailService, file, 150);

        if (thumbnailUrl == string.Empty) return;

        thumbnailCache[file.FullName] = thumbnailUrl;
        await InvokeAsync(StateHasChanged);
    }

    private void HandleAddTagClick(FileInfo clickedFile)
    {
        FileTagDAO.AddFile(clickedFile.FullName);
        FileTagDAO.AddTag("bruh3");
        FileTagDAO.MapFileToTag(clickedFile.FullName, "bruh3");
    }

    private void HandleDirectoryClick(DirectoryInfo clickedDirectory)
    {
        if (!doubleClickDetector.IsDoubleClick(clickedDirectory))
        {
            ToggleSelection(clickedDirectory, selections);
            return;
        }

        PathStateContainer.SetPath(clickedDirectory.FullName);
    }

    private void HandleFileClick(FileInfo clickedFile)
    {
        if (!doubleClickDetector.IsDoubleClick(clickedFile))
        {
            ToggleSelection(clickedFile, selections);
            return;
        }

        throw new NotImplementedException();
    }

    private void ToggleSelection<T>(T item, List<T> list)
    {
        if (list.Contains(item))
        {
            list.Remove(item);
        }
        else
        {
            list.Clear();
            list.Add(item);
        }
    }

    private string GetCardClass(object item)
    {
        bool isSelected = selections.Contains(item) || selections.Contains(item);

        string fileCardClass = item is FileInfo ? "file-card" : "directory-card";

        return isSelected ? $"{fileCardClass} selected-card card-content" : $"{fileCardClass} unselected-card card-content";
    }

    protected override void OnInitialized()
    {
        TagMessageContainer.OnChange += () => InvokeAsync(StateHasChanged);
    }
}
