@*Chase Brower, 2023*@

@using BrowerFileBrowser.Containers;
@using BrowerFileBrowser.Interfaces;
@using BrowerFileBrowser.Models;
@using MudBlazor;
@using System.Diagnostics;

@inject PathStateContainer PathStateContainer;

@implements IFileViewer;

<MudTable Items="@DirectoriesAndFiles" @ref="@mudTable" FixedHeader="true" Hover="true" RowClassFunc="@SelectedRowClassFunc" 
        T="@FileSystemInfo" OnRowClick="@RowClickEvent" Breakpoint="Breakpoint.Sm" Loading="@loading" LoadingProgressColor="Color.Info"
          Height="100%" Style="height: 0px; flex-grow: 1;" SortLabel="Sort By">
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<FileSystemInfo, object>(x =>x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<FileSystemInfo, object>(x =>x.LastWriteTime)">Date Modified</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<FileSystemInfo, object>(x =>x.Extension)">Type</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">
            @if (context is DirectoryInfo)
            {
                <MudIcon Icon="@Icons.Material.Filled.Folder" Style="padding-right: 0.25rem;"/>
            }
            @context.Name
        </MudTd>
        <MudTd DataLabel="Date Modified">@context.LastWriteTime</MudTd>
        <MudTd DataLabel="Type">@context.Extension</MudTd>
    </RowTemplate>
</MudTable>

@code {
    private int selectedRowNumber = -1;
    private MudTable<FileSystemInfo> mudTable;
    private bool loading = false;

    DoubleClickDetector doubleClickDetector = new();

    private List<FileSystemInfo> DirectoriesAndFiles => Directories.Cast<FileSystemInfo>().Concat(Files.Cast<FileSystemInfo>()).ToList();

    [Parameter]
    public List<DirectoryInfo> Directories { get; set; } = new();

    [Parameter]
    public List<FileInfo> Files { get; set; } = new();

    private void RowClickEvent(TableRowClickEventArgs<FileSystemInfo> tableRowClickEventArgs)
    {
        if(!doubleClickDetector.IsDoubleClick(tableRowClickEventArgs.Item))
        {
            return;
        }

        if(tableRowClickEventArgs.Item is DirectoryInfo)
        {
            PathStateContainer.SetPath(Path.Combine(PathStateContainer.Path, tableRowClickEventArgs.Item.FullName));
        }
        else if (tableRowClickEventArgs.Item is FileInfo)
        {
            //Should preview the file
            throw new NotImplementedException();
        }
    }

    private string SelectedRowClassFunc(FileSystemInfo fileSystemInfo, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            return string.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(fileSystemInfo))
        {
            selectedRowNumber = rowNumber;
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }
}
