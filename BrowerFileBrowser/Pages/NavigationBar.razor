@*Chase Brower, 2023*@

@using BrowerFileBrowser.Containers;
@using BrowerFileBrowser.Interfaces;
@using BrowerFileBrowser.Models;
@using MudBlazor;

@inject IDefaultNodeProvider DefaultNodeProvider;
@inject PathStateContainer PathStateContainer;

<div id="navigation-bar" style="min-width: 12rem; width: 20%; padding: 0.5rem; overflow-x: hidden; overflow-y: scroll;">
    <MudTreeView Items="@DefaultNodes" Hover="true" Width="100%" SelectedValueChanged="SelectedFolderChanged" T="FileSystemNode"
                 ServerData="@LoadNextNode">
        <ItemTemplate Context="item">
            <MudTreeViewItem Icon="@Icons.Material.Filled.Folder" Value="@item" CanExpand="!item.Pinnable">
                <BodyContent>
                    <div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%">
                        <MudText Style="justify-self: start;">@item.PreferredName</MudText>
                        @if (item.Pinnable)
                        {
                            <div style="justify-self: end;">
                                <MudIconButton Icon="@Icons.Material.Filled.PushPin" Size="Size.Medium" Color="Color.Inherit" />
                            </div>
                        }
                    </div>
                </BodyContent>
            </MudTreeViewItem>
        </ItemTemplate>
    </MudTreeView>
</div>

@code {
    private HashSet<FileSystemNode> DefaultNodes = new();

    protected override void OnInitialized()
    {
        DefaultNodes = DefaultNodeProvider.GetDefaultNodes();
    }

    private void SelectedFolderChanged(FileSystemNode chosenNode)
    {
        if (chosenNode is null) return;

        PathStateContainer.SetPath((chosenNode.FileSystemInfo as DirectoryInfo)?.FullName);
    }

    private async Task<HashSet<FileSystemNode>> LoadNextNode(FileSystemNode parentNode)
    {
        return parentNode.GetChildren();
    }
}
