@*Chase Brower, 2023*@

@page "/"
@using BrowerFileBrowser.Containers;
@using BrowerFileBrowser.Enums;
@using BrowerFileBrowser.Models;
@using BrowerFileBrowser.Utils;
@using MudBlazor;

@inject SettingsStateContainer SettingsStateContainer
@inject PathStateContainer PathStateContainer

<MudThemeProvider IsDarkMode="true" />

<MudStack name="page-container" Spacing="0" Style="width: 100%; height: 100%;" Class="gradient-background">
    <PathBar Path="@PathStateContainer.Path" />
    <MudStack name="navigation-content-holder" Row="true" Spacing="0" Style="width: 100%; height: 0px; flex-grow: 1; background-color: var(--mud-palette-surface);">
        <NavigationBar />
        <MudStack name="controlbar-content-holder" Spacing="0" Justify="Justify.FlexStart" Style="width: 100%; height: 100%;" Class="no-select">
            <ControlBar />
            <FileViewerInjector FileViewerType="@SettingsStateContainer.SelectedFileViewerType" Directories="@directories" Files="@files" />
        </MudStack>
    </MudStack>
</MudStack>

@code {
    private List<DirectoryInfo> directories = new();
    private List<FileInfo> files = new();

    /// <summary>
    /// Handles user path change event
    /// </summary>
    public void UserPathChangeHandler()
    {
        if (PathStateContainer.Path == string.Empty) return;

        if (PathStateContainer.Path.StartsWith("Tags:/"))
        {
            directories = new();
            files = TagUtils.GetFiles(PathStateContainer.Path);
        }
        else
        {
            directories = FileUtils.TryGetDirectories(PathStateContainer.Path, out DirectoryInfoResponse dirResponse) ? dirResponse.DirectoryInfos : directories;
            files = FileUtils.TryGetFiles(PathStateContainer.Path, out FileInfoResponse fileResponse) ? fileResponse.FileInfos : files;
        }
        InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        SettingsStateContainer.OnChange += () => InvokeAsync(StateHasChanged);
        PathStateContainer.OnChange += () => UserPathChangeHandler();
    }
}
