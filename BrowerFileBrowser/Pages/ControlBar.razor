@*Chase Brower, 2023*@

@using BrowerFileBrowser.Enums;
@using BrowerFileBrowser.Utils;
@using MudBlazor;
@using BrowerFileBrowser.Containers;

@inject SettingsStateContainer SettingsStateContainer
@inject PathStateContainer PathStateContainer

<MudStack Row="false" Spacing="0" Style="width: 100%; height: fit-content;">
    <MudStack Row="true" Style="width: 100%; height: fit-content;" AlignItems="AlignItems.Center" Spacing="2">
        <MudChipSet SelectedChipChanged="@SelectedFileViewerTypeChanged" Mandatory="true" MultiSelection="false" Filter="true">
            <MudChip Text="List" Color="Color.Default" SelectedColor="Color.Success" Default="true" Value="FileViewerType.List"></MudChip>
            <MudChip Text="Grid" Color="Color.Default" SelectedColor="Color.Success" Value="FileViewerType.Grid"></MudChip>
        </MudChipSet>
        <MudDivider Vertical="true" Style="height:60%;"></MudDivider>
        <TagBrowser></TagBrowser>
    </MudStack>
    <MudDivider />
</MudStack>

@code {
    private void UpArrowClicked(MouseEventArgs args)
    {
        if (!MouseUtils.IsLeftMouse(args) || string.IsNullOrEmpty(PathStateContainer.Path)) return;

        string parentPath = string.Empty;

        try
        {
            parentPath = Directory.GetParent(PathStateContainer.Path)?.FullName ?? string.Empty;
        }
        catch (Exception) { }

        if(!string.IsNullOrEmpty(parentPath))
        {
            PathStateContainer.SetPath(parentPath);
        }
    }

    private void LeftArrowClicked(MouseEventArgs args)
    {
        if (!MouseUtils.IsLeftMouse(args)) return;

        PathStateContainer.NavigateBackward();
    }
    private void RightArrowClicked(MouseEventArgs args)
    {
        if (!MouseUtils.IsLeftMouse(args)) return;

        PathStateContainer.NavigateForward();
    }

    private void SelectedFileViewerTypeChanged(MudChip newSelection)
    {
        SettingsStateContainer.SetFileViewerType(newSelection?.Value as FileViewerType?);
    }

    private void HandlePathStateContainerChange()
    {
        InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        PathStateContainer.OnChange -= HandlePathStateContainerChange;
        PathStateContainer.OnChange += HandlePathStateContainerChange;

        base.OnInitialized();
    }
}
